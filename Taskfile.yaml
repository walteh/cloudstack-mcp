version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    JSONSCHEMA_FILES:
        sh: find . -type f -name '*.schema.json'
    GO_ROOT_PKG:
        sh: cat go.mod | grep -oE '^module[^\S]+' | cut -d' ' -f2

env:
    COMPOSE_BAKE: true

tasks:
    go-mod-tidy:
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - for: { var: GO_MODULES }
              cmd: cd {{.ITEM}} && go mod tidy

    go-mod-upgrade:
        run: once
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - ./go tool go-mod-upgrade --force

    options:
        desc: generates options for structs with '//go:opts' comment
        vars:
            OPTION_GEN_DATA:
                sh: |
                    grep -rl "//go:opts" --include="*.go" . | xargs -I{} bash -c 'd=$(dirname {}); d=${d#./}; awk -v d="$d {}" '\''/\/\/go:opts/ {getline; if($1=="type") print d, $2}'\'' {}'
            OPTION_GEN_SOURCE_FILES:
                sh: |
                    grep -rl "//go:opts" --include="*.go" .
        generates:
            - "**/*_opts.gen.go"
        sources:
            - '{{.OPTION_GEN_SOURCE_FILES | join ","}}'
        cmds:
            - for: { var: OPTION_GEN_DATA, split: "\n" }
              cmd: |
                  ./go tool github.com/kazhuravlev/options-gen/cmd/options-gen \
                    -out-filename={{splitList " " .ITEM | first}}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go \
                    -filename={{ splitList " " .ITEM | rest | first }} \
                    -from-struct={{ splitList " " .ITEM | last }} \
                    -pkg={{ splitList " " .ITEM | first | splitList "/" | last }}

    mockery:
        desc: generates mocks for interfaces with '//go:mock' comment
        vars:
            TMP_DIR: ./gen/config
            MOCKERY_INTERFACE_DATA:
                sh: |
                    grep -rl "//go:mock" --include="*.go" . | xargs -I{} bash -c 'd=$(dirname {}); d=${d#./}; awk -v d="$d {}" '\''/\/\/go:mock/ {getline; if($1=="type") print d, $2}'\'' {}'
            MOCKERY_SOURCE_FILES:
                sh: |
                    grep -rl "//go:mock" --include="*.go" .
        sources:
            - '{{.MOCKERY_SOURCE_FILES | join ","}}'
            - .mockery.yaml
        generates:
            - ./gen/mocks/**/*_mock.gen.go
            - ./gen/config/.mockery.yaml
        cmds:
            - cmd: mkdir -p {{.TMP_DIR}}
            - cmd: cp .mockery.yaml {{.TMP_DIR}}/.mockery.yaml
            - for: { var: "MOCKERY_INTERFACE_DATA", split: "\n", as: ITEM }
              cmd: yq -i ".packages.\"{{ .GO_ROOT_PKG }}/{{ splitList " " .ITEM | first }}\".interfaces.{{ splitList " " .ITEM | last }} = {}" {{.TMP_DIR}}/.mockery.yaml
            - cmd: ./go tool github.com/vektra/mockery/v2 --config={{.TMP_DIR}}/.mockery.yaml

    cmk:
        desc: Run CloudMonkey command in Docker container
        cmds:
            - bash ./scripts/cmk.sh {{.CLI_ARGS}}

    mcp:service-account:check:
        desc: Check MCP service account status
        cmds:
            - bash ./scripts/cmk.sh list users username=mcp-service

    docker:start:
        desc: Start CloudStack and MCP server using Docker Compose
        cmds:
            - docker compose --progress=tty up -d --wait --build

    docker:restart:
        desc: Start CloudStack and MCP server using Docker Compose
        cmds:
            - task: docker:stop
            - task: docker:start

    docker:stop:
        desc: Stop CloudStack and MCP server
        cmds:
            - docker compose --progress=tty down

    docker:build:
        desc: Build Docker images for MCP and CloudMonkey
        cmds:
            - docker compose --progress=tty build

    run:server:
        desc: Run the MCP server
        cmds:
            - ./go run ./cmd/server

    build:
        desc: Build the MCP server
        cmds:
            - ./go build -o bin/server ./cmd/server

    clean:
        desc: Clean build artifacts
        cmds:
            - rm -rf bin
            - rm -rf .tmp

    check-qemu:
        desc: Check and install QEMU if needed on macOS
        cmds:
            - bash ./scripts/install-qemu-macos.sh

    build:setup-kvm:
        desc: Build the setup-kvm tool
        cmds:
            - mkdir -p bin
            - go build -o bin/setup-kvm ./cmd/setup-kvm
        sources:
            - cmd/setup-kvm/main.go
        generates:
            - bin/setup-kvm

    run:setup-kvm:
        desc: Run the setup-kvm command
        deps: [check-qemu]
        cmds:
            - ./go run ./cmd/setup-kvm {{.CLI_ARGS}}

    setup-kvm:
        desc: Set up KVM inside a VM
        deps: [build:setup-kvm]
        cmds:
            - task: build:setup-kvm
            - bin/setup-kvm {{.CLI_ARGS}}

    generate-hypervisor-grpc:
        desc: Generate gRPC code for hypervisor
        cmds:
            - mkdir -p api/services/hypervisor/v1
            - protoc -I api/services --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative api/services/hypervisor/v1/hypervisor.proto
        sources:
            - api/services/hypervisor/v1/hypervisor.proto
        generates:
            - api/services/hypervisor/v1/hypervisor.pb.go
            - api/services/hypervisor/v1/hypervisor_grpc.pb.go
