version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    JSONSCHEMA_FILES:
        sh: find . -type f -name '*.schema.json'
    MOCKERY_SOURCE_FILES:
        sh: 'grep -r "//go:mockery" --include="*.go" . | cut -d: -f1 | sort | uniq'

env:
    COMPOSE_BAKE: true

tasks:
    go-mod-tidy:
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - for: { var: GO_MODULES }
              cmd: cd {{.ITEM}} && go mod tidy

    go-mod-upgrade:
        run: once
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - ./go tool go-mod-upgrade --force

    cmk:
        desc: Run CloudMonkey command in Docker container
        cmds:
            - bash ./scripts/cmk.sh {{.CLI_ARGS}}

    mcp:service-account:check:
        desc: Check MCP service account status
        cmds:
            - bash ./scripts/cmk.sh list users username=mcp-service

    docker:start:
        desc: Start CloudStack and MCP server using Docker Compose
        cmds:
            - docker compose --progress=tty up -d --wait --build

    docker:restart:
        desc: Start CloudStack and MCP server using Docker Compose
        cmds:
            - task: docker:stop
            - task: docker:start

    docker:stop:
        desc: Stop CloudStack and MCP server
        cmds:
            - docker compose --progress=tty down

    docker:build:
        desc: Build Docker images for MCP and CloudMonkey
        cmds:
            - docker compose --progress=tty build

    run:server:
        desc: Run the MCP server
        cmds:
            - ./go run ./cmd/server

    build:
        desc: Build the MCP server
        cmds:
            - ./go build -o bin/server ./cmd/server

    clean:
        desc: Clean build artifacts
        cmds:
            - rm -rf bin
            - rm -rf .tmp
